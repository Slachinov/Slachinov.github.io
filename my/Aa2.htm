<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Простое приложение</title>
</head>
<body>


  <script>
    function createColoredSectionsWithDynamicBottom() {
      const grayPanel = document.createElement('div');
      grayPanel.style.backgroundColor = 'lightgray';
      grayPanel.style.position = 'absolute';
      grayPanel.style.top = '0';
      grayPanel.style.left = '0';
      grayPanel.style.width = '100%';
      grayPanel.style.height = '100%';
      grayPanel.style.zIndex = '0';


      const topBlueSection = document.createElement('div');
      topBlueSection.id = 'topBlueSection';
      topBlueSection.style.backgroundColor = 'blue';
      topBlueSection.style.width = '100%';
      topBlueSection.style.height = '0';
      topBlueSection.style.paddingLeft = '10px';
      topBlueSection.style.paddingTop = '5px';
      topBlueSection.style.overflow = 'hidden';


      const bottomRedSection = document.createElement('div');
      bottomRedSection.style.backgroundColor = 'red';
      bottomRedSection.style.width = '100%';
      bottomRedSection.style.position = 'absolute';
      bottomRedSection.style.bottom = '0';


      const buttonTextsBottom = ["localLs", "github", "indexedDb", "a4"];
      const buttonsBottom = [];
      for (let i = 0; i < buttonTextsBottom.length; i++) {
        const button = document.createElement('button');
        button.textContent = buttonTextsBottom[i];
        bottomRedSection.appendChild(button);
        button.style.marginRight = '5px';
        button.style.fontSize = '1.5em';
        buttonsBottom.push(button);
      }


      const middleGreenSection = document.createElement('div');
      middleGreenSection.style.backgroundColor = 'green';
      middleGreenSection.style.width = '100%';
      middleGreenSection.style.position = 'absolute';
      middleGreenSection.style.top = topBlueSection.offsetHeight + 'px';
      middleGreenSection.style.bottom = bottomRedSection.offsetHeight + 'px';
      middleGreenSection.style.display = 'flex';
      middleGreenSection.style.flexDirection = 'column';


      const middleLightGreenSection = document.createElement('div');
      middleLightGreenSection.style.backgroundColor = 'lightgreen';
      middleLightGreenSection.style.flexGrow = '1';
      middleGreenSection.appendChild(middleLightGreenSection);


      const middleBrownSection = document.createElement('div');
      middleBrownSection.style.backgroundColor = 'brown';
      middleGreenSection.appendChild(middleBrownSection);
      middleBrownSection.style.width = '100%';


      const buttonTextsMiddle = ["File", "Edit", "View"];
      for (let i = 0; i < buttonTextsMiddle.length; i++) {
        const button = document.createElement('button');
        button.textContent = buttonTextsMiddle[i];
        middleBrownSection.appendChild(button);
        button.style.marginRight = '10px';
        button.style.fontSize = '1em';
      }


      grayPanel.appendChild(topBlueSection);
      grayPanel.appendChild(bottomRedSection);
      grayPanel.appendChild(middleGreenSection);


      document.body.appendChild(grayPanel);


      function updateMiddleSectionHeight() {
        const topHeight = topBlueSection.offsetHeight;
        const bottomHeight = bottomRedSection.offsetHeight;
        middleGreenSection.style.top = topHeight + 'px';
        middleGreenSection.style.bottom = bottomHeight + 'px';
      }


      const topObserver = new ResizeObserver(entries => {
        updateMiddleSectionHeight();
      });
      topObserver.observe(topBlueSection);


      const bottomObserver = new ResizeObserver(entries => {
        updateMiddleSectionHeight();
      });
      bottomObserver.observe(bottomRedSection);


      const localLsButton = buttonsBottom[0];
      localLsButton.addEventListener('click', () => {
        const topPanel = document.getElementById('topBlueSection');
        topPanel.innerHTML = '';


        const baseButtonStyle = {
          marginRight: '5px',
          marginBottom: '5px',
          display: 'inline-block',
          fontSize: '1.3em'
        };


        function applyStyles(element, styles) {
          for (const key in styles) {
            element.style[key] = styles[key];
          }
        }


        const closeButton = document.createElement('button');
        closeButton.textContent = 'cl';
        applyStyles(closeButton, baseButtonStyle);
        topPanel.appendChild(closeButton);


        const inputField = document.createElement('input');
        inputField.type = 'text';
        applyStyles(inputField, { marginRight: '5px', marginBottom: '5px', display: 'inline-block', fontSize: '1.3em' });
        topPanel.appendChild(inputField);


        const loadButton = document.createElement('button');
        loadButton.textContent = 'load';
        applyStyles(loadButton, baseButtonStyle);
        topPanel.appendChild(loadButton);


        const allButton = document.createElement('button');
        allButton.textContent = 'all';
        applyStyles(allButton, baseButtonStyle);
        topPanel.appendChild(allButton);


        const br = document.createElement('br');
        topPanel.appendChild(br);


        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        applyStyles(checkbox, { marginRight: '5px', marginBottom: '5px', display: 'inline-block', fontSize: '1.3em' });
        topPanel.appendChild(checkbox);


        const searchButton = document.createElement('button');
        searchButton.textContent = 'search';
        applyStyles(searchButton, baseButtonStyle);
        topPanel.appendChild(searchButton);


        const writeButton = document.createElement('button');
        writeButton.textContent = 'write';
        applyStyles(writeButton, { ...baseButtonStyle, color: 'red' });
        topPanel.appendChild(writeButton);


        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'delete';
        applyStyles(deleteButton, { ...baseButtonStyle, color: 'red' });
        topPanel.appendChild(deleteButton);


        const writeGhButton = document.createElement('button');
        writeGhButton.textContent = 'write gh';
        applyStyles(writeGhButton, { ...baseButtonStyle, color: 'red' });
        topPanel.appendChild(writeGhButton);


        topPanel.style.height = 'auto';
        updateMiddleSectionHeight();
      });


      const topYellowPanel = document.createElement('div');
      topYellowPanel.style.backgroundColor = 'yellow';
      topYellowPanel.style.position = 'absolute';
      topYellowPanel.style.top = '0';
      topYellowPanel.style.left = '0';
      topYellowPanel.style.width = '100%';
      topYellowPanel.style.height = '100%';
      topYellowPanel.style.zIndex = '1';
      topYellowPanel.style.display = 'none';
      document.body.appendChild(topYellowPanel);


      return {
        setTopHeight: function(newHeight) {
          topBlueSection.style.height = newHeight + 'px';
        }
      };
    }


    window.onload = createColoredSectionsWithDynamicBottom;
  </script>


</body>
</html>

