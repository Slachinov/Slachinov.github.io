<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>gihub files</title>
<script src="../js/qqv33.js"></script>
  </head>
<body>125
<script type='module'>alert(7);/*
alert(qq.ca);
qq.ca([{tag:'div',style:{top:'0px',left:'0px',right:'0px',bottom:'0px',background:'gray',position: 'absolute','z-index':5},name:'main'}]);*/




import { m, ls, gh, db } from '/Lib/pan/main.js';




      import { createFullscreenPanel } from '/Lib/pan/1all1.js';
      
      import { createEditButton } from '/aa/edit2.js';
      import { createTopBottomMiddleLayout } from '/Lib/pan/3pv2.js';




      const grayPanel = createFullscreenPanel({ tag: 'div', style: { background: 'gray' } });
      let mm = createTopBottomMiddleLayout(
        grayPanel,
        { style: { background: 'blue' } },
        { style: { background: 'green' } },
        { style: { background: 'red' } }
      );
      m.top = mm[0];
      m.blue = mm[0];
      m.red = mm[1];
      m.green = mm[2];




      qq.ce({ tag: 'button', it: 'tratata345', parent: mm[0] });
      qq.ce({ tag: 'button', it: 'tratata', parent: mm[1] });
//=========/==/====/


 let inp=qq.ce({ tag: 'input', ns: 'filename', attr: { placeholder: 'Имя файла (например: files/test.txt)' }, style: { width: '100%', marginBottom: '0.5em' } ,parent:m.top});
//============≈===
let repo='Slachinov/Bot-server';


 qq.ce({ tag: 'button', it: '📖 Прочитать файл', style: { marginBottom: '0.5em' }, parent:m.top,event: {
      click: async function () {
        let path = inp.value.trim();
        if (!path) return alert('Укажи имя файла');
        let url = `https://api.github.com/repos/${repo}/contents/${path}`;




        let res = await fetch(url, {
          headers: { Authorization: `token ${token}` }
        });
        let data = await res.json();
        if (data.content) {
          let decoded = decodeURIComponent(escape(atob(data.content)));
          app.content.value = decoded;
        } else {
          alert('Ошибка: ' + data.message);
        }
      }
    }});


//==////====////
</script>
let token = localStorage.getItem('bot-token');
let repo = 'user/repo'; /* замените на свой repo, например: myname/myrepo */


let app = qq.ca('githubApp', {
  skin: [
    { ns: 'githubApp', tag: 'div', style: { padding: '1em', fontFamily: 'sans-serif' } },


    /* Ввод пути */
    { tag: 'input', ns: 'path', attr: { placeholder: 'Путь (например: files/)' }, prop: { value: 'files/' }, style: { width: '100%', marginBottom: '0.5em' } },


    /* Загрузка списка файлов */
    { tag: 'button', ns: 'load', innerText: '📂 Загрузить список файлов', style: { marginBottom: '1em' }, event: {
      tap: async function () {
        let path = app.path.value.trim();
        if (!path) return alert('Укажи путь');
        let url = `https://api.github.com/repos/${repo}/contents/${path}`;


        let res = await fetch(url, {
          headers: { Authorization: `token ${token}` }
        });
        let files = await res.json();


        if (!Array.isArray(files)) return alert('Это не папка или ошибка');


        app.list.innerHTML = '';
        for (let file of files) {
          if (file.type === 'file') {
            app.list.appendChild(qq.ce({
              tag: 'button', innerText: file.name, style: { display: 'block', margin: '2px 0' },
              event: {
                tap: async () => {
                  let res2 = await fetch(file.download_url);
                  let txt = await res2.text();
                  app.filename.value = file.path;
                  app.content.value = txt;
                }
              }
            }));
          }
        }
      }
    }},


    { tag: 'div', ns: 'list', style: { marginBottom: '1em' } },


    /* Имя файла */
    { tag: 'input', ns: 'filename', attr: { placeholder: 'Имя файла (например: files/test.txt)' }, style: { width: '100%', marginBottom: '0.5em' } },


    /* Чтение файла */
    { tag: 'button', innerText: '📖 Прочитать файл', style: { marginBottom: '0.5em' }, event: {
      tap: async function () {
        let path = app.filename.value.trim();
        if (!path) return alert('Укажи имя файла');
        let url = `https://api.github.com/repos/${repo}/contents/${path}`;


        let res = await fetch(url, {
          headers: { Authorization: `token ${token}` }
        });
        let data = await res.json();
        if (data.content) {
          let decoded = decodeURIComponent(escape(atob(data.content)));
          app.content.value = decoded;
        } else {
          alert('Ошибка: ' + data.message);
        }
      }
    }},


    /* Контент файла */
    { tag: 'textarea', ns: 'content', attr: { placeholder: 'Содержимое файла...' }, style: { width: '100%', height: '150px', marginBottom: '0.5em' } },


    /* Сохранение файла */
    { tag: 'button', innerText: '💾 Сохранить файл', event: {
      tap: async function () {
        let path = app.filename.value.trim();
        let content = app.content.value;
        if (!path) return alert('Укажи имя файла');


        let getSha = async () => {
          let res = await fetch(`https://api.github.com/repos/${repo}/contents/${path}`, {
            headers: { Authorization: `token ${token}` }
          });
          let data = await res.json();
          return data.sha || undefined;
        };


        let sha = await getSha();
        let encoded = btoa(unescape(encodeURIComponent(content)));


        let res = await fetch(`https://api.github.com/repos/${repo}/contents/${path}`, {
          method: 'PUT',
          headers: {
            Authorization: `token ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            message: 'Обновление файла',
            content: encoded,
            ...(sha ? { sha } : {})
          })
        });


        let result = await res.json();
        if (result.commit) {
          alert('Сохранено: ' + result.commit.message);
        } else {
          alert('Ошибка: ' + result.message);
        }
      }
    }}
  ]
});


document.body.appendChild(app);