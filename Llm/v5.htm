<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <script src="../js/github.js"></script>
    <script src="../js/qqv32.js"></script>
    <script src="../js/qq.github.v3.js"></script>
<title>TensorFlow.js Проверка</title>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/universal-sentence-encoder"></script>
</head>
<body>
<script>
      alert('version=' + 6);
    </script>
    <script type='module'>
import { m, ls, gh, db } from '/Lib/pan/main.js';

import { createFullscreenPanel } from '/Lib/pan/1all1.js';
      
 const grayPanel = createFullscreenPanel({ tag: 'div', style: { background: 'gray' } ,event:{click:function(){this.hide()}}});
document.body.el=grayPanel;


let edit=qq.ce({tag:'div',style:{width:'100%',height:'300px', background:'lightgreen'},parent:grayPanel, it:'tyt'});


let fs={style:{'font-size':'25px'}};

let check=document.body.check;

qq.ce({tag:'button',it:'clear edit',parent:grayPanel},fs);


qq.ce({tag:'button',it:'run llm',parent:grayPanel,event:{click:function(){document.body.edit= edit.innerText }}},fs);

let out=qq.ce({tag:'div',style:{width:'100%',height:'300px', background:'lightgray', border:'1px solid black' ,overflowY:'auto'}, parent:grayPanel , it:'tyt'});
document.body.out=out;

check();
</script>
  <h3 id="status">Проверка...5</h3>



  <script>alert(1);


const se = [
  "Let",
  "let",
  "lett",
  "if lett",
  "else let"
];
//alert(sentences);

 

    async function check(a) {
     let status =document.body.out;
     let sentences =a||se;
alert(sentences);
      if (typeof tf === 'undefined') {
        status.innerText = 'TensorFlow.js НЕ загружен.';
        return;
      } else {
        status.innerText = 'TensorFlow.js загружен.\n';
      }


      try {
        const model = await use.load();
        if (typeof model.embed === 'function') {
          status.innerText += 'Модель USE загружена.';
//==
const embeddings = await model.embed(sentences);
status.innerText += '\nэмбединг sentences загружен';
        const vectors = await embeddings.array();

status.innerText += '\nвектор загружен';
//==
function cosineSimilarity (vecA, vecB) {
          let dot = 0, magA = 0, magB = 0;
          for (let i = 0; i < vecA.length; i++) {
            dot += vecA[i] * vecB[i];
            magA += vecA[i] * vecA[i];
            magB += vecB[i] * vecB[i];
          }
          return dot / (Math.sqrt(magA) * Math.sqrt(magB));
        }

//alert(cosineSimilarity);
//alert(vectors.length);


       
     

//====÷


status.innerHTML = ''; // Очистка




const table = document.createElement('table');
table.style.width = '100%';
table.style.borderCollapse = 'collapse';
table.style.border = '1px solid black';




const addRow = (text1, text2, similarity) => {
    const row = document.createElement('tr');




    const td1 = document.createElement('td');
    td1.innerText = text1;
    td1.style.width = '38%';
    td1.style.border = '1px solid black';
    td1.style.fontSize='25px';




    const td2 = document.createElement('td');
    td2.innerText = text2;
    td2.style.width = '38%';
    td2.style.border = '1px solid black';




    const td3 = document.createElement('td');
    td3.innerText = similarity;
    td3.style.width = '20%';
    td3.style.border = '1px solid black';
    td3.style.textAlign = 'center';




    row.appendChild(td1);
    row.appendChild(td2);
    row.appendChild(td3);
    table.appendChild(row);
};




for (let i = 0; i < vectors.length; i++) {
    for (let j = i + 1; j < vectors.length; j++) {
        const sim = cosineSimilarity(vectors[i], vectors[j]);
        addRow(sentences[i], sentences[j], sim.toFixed(3));
    }
}




status.appendChild(table);

//==÷
        } else {
          status.innerText += 'USE не работает.';
        }
      } catch (e) {
        status.innerText += 'Ошибка при загрузке модели: ' + e.message;
      }
//==


    }

document.body.check=check;
    //check();
  </script>
</body>
</html>