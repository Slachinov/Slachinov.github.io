

<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <script src="../js/github.js"></script>
    <script src="../js/qqv32.js"></script>
    <script src="../js/qq.github.v3.js"></script>
    
   
    
  <title>TensorFlow.js Проверка</title>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/universal-sentence-encoder"></script>
</head>
<body>
<script>
      alert('version=' + 8);
    </script>
    <script type='module'>
import { m, ls, gh, db } from '/Lib/pan/main.js';




      import { createFullscreenPanel } from '/Lib/pan/1all1.js';
      
 const grayPanel = createFullscreenPanel({ tag: 'div', style: { background: 'gray' } });
</script>
  <h1 id="status">Проверка...4</h1>



  <script>//alert(9);


const sentences = [
  "var",
  "let",
  "const",
  "if",
  "else",
  "switch",
  "case",
  "default"
];
alert(sentences);


    async function check() {
      let status = document.getElementById('status');


      if (typeof tf === 'undefined') {
        status.innerText = 'TensorFlow.js НЕ загружен.';
        return;
      } else {
        status.innerText = 'TensorFlow.js загружен.\n';
      }


      try {
        const model = await use.load();
        if (typeof model.embed === 'function') {
          status.innerText += 'Модель USE загружена.';
//==
const embeddings = await model.embed(sentences);
status.innerText += '\nэмбединг sentences загружен';
        const vectors = await embeddings.array();

status.innerText += '\nвектор загружен';
//==
function cosineSimilarity(vecA, vecB) {
          let dot = 0, magA = 0, magB = 0;
          for (let i = 0; i < vecA.length; i++) {
            dot += vecA[i] * vecB[i];
            magA += vecA[i] * vecA[i];
            magB += vecB[i] * vecB[i];
          }
          return dot / (Math.sqrt(magA) * Math.sqrt(magB));
        }

//alert(cosineSimilarity);
//alert(vectors.length);


        let result = "Косинусное сходство:\n\n";
        for (let i = 0; i < vectors.length; i++) {
          for (let j = i + 1; j < vectors.length; j++) {
            const sim = cosineSimilarity(vectors[i], vectors[j]);
            result += `• '${sentences[i]}'\n   и\n  '${sentences[j]}'\n   → ${sim.toFixed(3)}\n\n`;
          }
        }




        status.innerText = result;


//==
        } else {
          status.innerText += 'USE не работает.';
        }
      } catch (e) {
        status.innerText += 'Ошибка при загрузке модели: ' + e.message;
      }
//==


    }


    check();
  </script>
</body>
</html>