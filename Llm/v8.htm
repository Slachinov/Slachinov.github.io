<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>USE + Косинусное сходство</title>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/universal-sentence-encoder"></script>
  <style>
    body {
      font-family: sans-serif;
      padding: 1em;
      line-height: 1.4;
    }
    h1, pre {
      font-size: 1.2em;
      white-space: pre-wrap;
    }
  </style>
</head>
<body>
  <h1 id="status">Загрузка...</h1>


  <script>
    const sentences = [
      "Где находится Караганда?",
      "Караганда находится в Казахстане.",
      "Где находится Москва?",
      "Яблоко от яблони недалеко падает."
    ];


    async function waitForUniversalSentenceEncoder() {
      while (typeof window.universalSentenceEncoder === 'undefined') {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      return window.universalSentenceEncoder;
    }


    async function cosineSimilarity(vecA, vecB) {
      let dot = 0, magA = 0, magB = 0;
      for (let i = 0; i < vecA.length; i++) {
        dot += vecA[i] * vecB[i];
        magA += vecA[i] * vecA[i];
        magB += vecB[i] * vecB[i];
      }
      return dot / (Math.sqrt(magA) * Math.sqrt(magB));
    }


    (async () => {
      const status = document.getElementById("status");
      try {
        status.innerText = "Ожидание модели...";
        const use = await waitForUniversalSentenceEncoder();
        const model = await use.load();
        status.innerText = "Модель загружена, рассчитываем...";


        const embeddings = await model.embed(sentences);
        const vectors = await embeddings.array();


        let output = "Косинусное сходство:\n\n";
        for (let i = 0; i < vectors.length; i++) {
          for (let j = i + 1; j < vectors.length; j++) {
            const sim = await cosineSimilarity(vectors[i], vectors[j]);
            output += `• '${sentences[i]}'\n   и\n  '${sentences[j]}'\n   → ${sim.toFixed(3)}\n\n`;
          }
        }


        status.innerText = output;
      } catch (e) {
        status.innerText = "Ошибка: " + e.message;
      }
    })();
  </script>
</body>
</html>